# Generated by Django 5.1.7 on 2025-05-30 12:22

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('menu', '0001_initial'),
        ('vendor', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tax_type', models.CharField(help_text='Tipo de taxa (ex: Entrega, Serviço)', max_length=20, unique=True)),
                ('tax_percentage', models.DecimalField(decimal_places=2, help_text='Porcentagem da taxa a ser aplicada sobre o subtotal', max_digits=4, verbose_name='Taxa (%)')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se a taxa está ativa e deve ser aplicada aos pedidos')),
            ],
            options={
                'verbose_name_plural': 'Taxas',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(help_text='Quantidade do item no carrinho')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do registro')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização')),
                ('fooditem', models.ForeignKey(help_text='Item de comida adicionado ao carrinho', on_delete=django.db.models.deletion.CASCADE, to='menu.fooditem')),
                ('user', models.ForeignKey(help_text='Usuário proprietário do carrinho', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(help_text='Número único do pedido', max_length=20)),
                ('first_name', models.CharField(help_text='Nome do cliente', max_length=50)),
                ('last_name', models.CharField(help_text='Sobrenome do cliente', max_length=50)),
                ('phone', models.CharField(blank=True, help_text='Telefone de contato', max_length=15)),
                ('email', models.EmailField(help_text='Email de contato', max_length=50)),
                ('address_line_1', models.CharField(help_text='Primeira linha do endereço de entrega', max_length=50)),
                ('address_line_2', models.CharField(blank=True, help_text='Segunda linha do endereço de entrega (opcional)', max_length=50)),
                ('country', models.CharField(blank=True, help_text='País', max_length=15)),
                ('state', models.CharField(blank=True, help_text='Estado', max_length=15)),
                ('city', models.CharField(help_text='Cidade', max_length=50)),
                ('postal_code', models.CharField(help_text='CEP', max_length=10)),
                ('order_note', models.CharField(blank=True, help_text='Observações adicionais sobre o pedido', max_length=500)),
                ('order_total', models.FloatField(help_text='Valor total do pedido incluindo taxas')),
                ('tax', models.FloatField(help_text='Valor total das taxas aplicadas')),
                ('status', models.CharField(choices=[('PENDING', 'Pendente'), ('CONFIRMED', 'Confirmado'), ('PREPARING', 'Em Preparo'), ('READY', 'Pronto'), ('ON_THE_WAY', 'Em Entrega'), ('DELIVERED', 'Entregue'), ('CANCELLED', 'Cancelado')], default='PENDING', help_text='Status atual do pedido', max_length=15)),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pendente'), ('PAID', 'Pago'), ('FAILED', 'Falhou'), ('REFUNDED', 'Reembolsado')], default='PENDING', help_text='Status do pagamento', max_length=15)),
                ('is_ordered', models.BooleanField(default=False, help_text='Indica se o pedido foi confirmado')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação do pedido')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização')),
                ('address', models.ForeignKey(blank=True, help_text='Endereço de entrega selecionado', null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.useraddress')),
                ('user', models.ForeignKey(help_text='Usuário que realizou o pedido', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vendors', models.ManyToManyField(blank=True, help_text='Restaurantes envolvidos no pedido', to='vendor.vendor')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(help_text='Número único da nota fiscal', max_length=20, unique=True)),
                ('pdf_file', models.FileField(blank=True, help_text='Arquivo PDF da nota fiscal', null=True, upload_to='invoices/')),
                ('invoice_date', models.DateTimeField(auto_now_add=True, help_text='Data e hora de emissão da nota fiscal')),
                ('order', models.OneToOneField(help_text='Pedido associado à nota fiscal', on_delete=django.db.models.deletion.CASCADE, related_name='invoice', to='marketplace.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantidade do item')),
                ('price', models.FloatField(help_text='Preço unitário do item no momento do pedido')),
                ('amount', models.FloatField(help_text='Valor total (preço × quantidade)')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora de criação')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização')),
                ('fooditem', models.ForeignKey(help_text='Item de comida pedido', on_delete=django.db.models.deletion.CASCADE, to='menu.fooditem')),
                ('order', models.ForeignKey(help_text='Pedido ao qual este item pertence', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='marketplace.order')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.CharField(help_text='Identificador único do pagamento', max_length=100)),
                ('payment_method', models.CharField(choices=[('CREDIT_CARD', 'Cartão de Crédito'), ('DEBIT_CARD', 'Cartão de Débito'), ('PIX', 'PIX'), ('CASH', 'Dinheiro')], help_text='Método de pagamento utilizado', max_length=20)),
                ('amount_paid', models.FloatField(help_text='Valor pago')),
                ('status', models.CharField(choices=[('PENDING', 'Pendente'), ('PAID', 'Pago'), ('FAILED', 'Falhou'), ('REFUNDED', 'Reembolsado')], help_text='Status do pagamento', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora do pagamento')),
                ('order', models.ForeignKey(help_text='Pedido associado ao pagamento', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='marketplace.order')),
                ('user', models.ForeignKey(help_text='Usuário que realizou o pagamento', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteRestaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora em que o restaurante foi favoritado')),
                ('user', models.ForeignKey(help_text='Usuário que favoritou o restaurante', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(help_text='Restaurante favoritado', on_delete=django.db.models.deletion.CASCADE, to='vendor.vendor')),
            ],
            options={
                'verbose_name': 'Restaurante Favorito',
                'verbose_name_plural': 'Restaurantes Favoritos',
                'unique_together': {('user', 'vendor')},
            },
        ),
    ]
